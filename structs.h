#define _BYTE  unsigned char

enum netsrc_t
{
	NS_NULL = 0xFFFFFFFF,
	NS_CLIENT1 = 0x0,
	NS_CLIENT2 = 0x1,
	NS_CLIENT3 = 0x2,
	NS_CLIENT4 = 0x3,
	NS_SERVER = 0x4,
	NS_MAXCLIENTS = 0x4,
	NS_PACKET = 0x5,
};

enum netadrtype_t
{
	NA_BOT = 0x0,
	NA_BAD = 0x1,
	NA_LOOPBACK = 0x2,
	NA_RAWIP = 0x3,
	NA_IP = 0x4,
};

enum JoinType
{
	JOIN_TYPE_NORMAL = 0x0,
	JOIN_TYPE_PLAYLIST = 0x1,
	JOIN_TYPE_FRIEND = 0x2,
	JOIN_TYPE_INVITE = 0x3,
	JOIN_TYPE_PARTY = 0x4,
	JOIN_TYPE_GROUPS = 0x5,
	JOIN_TYPE_COUNT = 0x6,
};

enum LobbyModule
{
	LOBBY_MODULE_INVALID = 0xFFFFFFFF,
	LOBBY_MODULE_HOST = 0x0,
	LOBBY_MODULE_CLIENT = 0x1,
	LOBBY_MODULE_PEER_TO_PEER = 0x3,
	LOBBY_MODULE_COUNT = 0x4,
};

enum LobbyMode
{
	LOBBY_MODE_INVALID = 0xFFFFFFFF,
	LOBBY_MODE_PUBLIC = 0x0,
	LOBBY_MODE_CUSTOM = 0x1,
	LOBBY_MODE_THEATER = 0x2,
	LOBBY_MODE_ARENA = 0x3,
	LOBBY_MODE_FREERUN = 0x4,
	LOBBY_MODE_COUNT = 0x5,
};

enum class LocalClientNum_t
{
	INVALID_LOCAL_CLIENT = 0xFFFFFFFF,
	LOCAL_CLIENT_0 = 0x0,
	LOCAL_CLIENT_FIRST = 0x0,
	LOCAL_CLIENT_KEYBOARD_AND_MOUSE = 0x0,
	LOCAL_CLIENT_1 = 0x1,
	LOCAL_CLIENT_2 = 0x2,
	LOCAL_CLIENT_3 = 0x3,
	LOCAL_CLIENT_COUNT = 0x4,
};

enum LobbyDisconnectClient
{
	LOBBY_DISCONNECT_CLIENT_INVALID = 0xFFFFFFFF,
	LOBBY_DISCONNECT_CLIENT_DROP = 0x0,
	LOBBY_DISCONNECT_CLIENT_KICK = 0x1,
	LOBBY_DISCONNECT_CLIENT_BADDLC = 0x2,
	LOBBY_DISCONNECT_CLIENT_KICK_PARTY = 0x3,
	LOBBY_DISCONNECT_CLIENT_HOSTRELOAD = 0x4,
	LOBBY_DISCONNECT_CLIENT_NOPARTYCHAT = 0x5,
};

enum LobbyType
{
	LOBBY_TYPE_INVALID = 0xFFFFFFFF,
	LOBBY_TYPE_PRIVATE = 0x0,
	LOBBY_TYPE_GAME = 0x1,
	LOBBY_TYPE_TRANSITION = 0x2,
	LOBBY_TYPE_COUNT = 0x3,
	LOBBY_TYPE_FIRST = 0x0,
	LOBBY_TYPE_LAST = 0x2,
	LOBBY_TYPE_AUTO = 0x3,
};

enum SessionActive
{
	SESSION_INACTIVE = 0x0,
	SESSION_KEEP_ALIVE = 0x1,
	SESSION_ACTIVE = 0x2,
};

enum LobbyChannel
{
	LOBBY_CHANNEL_HEARTBEAT = 0x0,
	LOBBY_CHANNEL_STATE = 0x1,
	LOBBY_CHANNEL_UNRELIABLE = 0x2,
	LOBBY_CHANNEL_RELIABLE = 0x3,
	LOBBY_CHANNEL_MIGRATE = 0x4,
	LOBBY_CHANNEL_PEER_TO_PEER = 0x5,
	LOBBY_CHANNEL_COUNT = 0x6,
};

enum NetChanMsgType_e
{
	NETCHAN_INVALID_CHANNEL_0 = 0xFFFFFFFF,
	NETCHAN_SNAPSHOT_0 = 0x0,
	NETCHAN_CLIENTMSG_0 = 0x1,
	NETCHAN_VOICE_0 = 0x2,
	NETCHAN_LOBBY_VOICE_0 = 0x3,
	NETCHAN_LOBBYPRIVATE_STATE_0 = 0x4,
	NETCHAN_LOBBYPRIVATE_HEARTBEAT_0 = 0x5,
	NETCHAN_LOBBYPRIVATE_RELIABLE_0 = 0x6,
	NETCHAN_LOBBYPRIVATE_UNRELIABLE_0 = 0x7,
	NETCHAN_LOBBYPRIVATE_MIGRATE_0 = 0x8,
	NETCHAN_LOBBYGAME_STATE_0 = 0x9,
	NETCHAN_LOBBYGAME_HEARTBEAT_0 = 0xA,
	NETCHAN_LOBBYGAME_RELIABLE_0 = 0xB,
	NETCHAN_LOBBYGAME_UNRELIABLE_0 = 0xC,
	NETCHAN_LOBBYGAME_MIGRATE_0 = 0xD,
	NETCHAN_LOBBY_JOIN_0 = 0xE,
	NETCHAN_PTP_0 = 0xF,
	NETCHAN_CLIENT_CONTENT_0 = 0x10,
	NETCHAN_TEST_0 = 0x11,
	NETCHAN_MAX_CHANNELS_0 = 0x12,
};

enum netchanMessageState_e
{
	NETCHAN_MESSAGE_COMPLETE = 0x0,
	NETCHAN_MESSAGE_FAILED = 0x1,
	NETCHAN_MESSAGE_TIMEOUT = 0x2,
};

enum PresenceActivity
{
	PRESENCE_ACTIVITY_MENU_FIRST = 0x0,
	PRESENCE_ACTIVITY_ONLINE_NOT_IN_TITLE = 0x1,
	PRESENCE_ACTIVITY_MENU_INLOBBY = 0x2,
	PRESENCE_ACTIVITY_MENU_LOOKING_FOR_PARTY = 0x3,
	PRESENCE_ACTIVITY_MENU_LOOKING_FOR_PLAYERS = 0x4,
	PRESENCE_ACTIVITY_MENU_LOCAL = 0x5,
	PRESENCE_ACTIVITY_MENU_START = 0x6,
	PRESENCE_ACTIVITY_IN_TITLE = 0x7,
	PRESENCE_ACTIVITY_NOT_IN_TITLE = 0x8,
	PRESENCE_ACTIVITY_MENU_LAST = 0xF,
	PRESENCE_ACTIVITY_CP_FIRST = 0x10,
	PRESENCE_ACTIVITY_CP_PLAYING_COOP_ON_MAP = 0x11,
	PRESENCE_ACTIVITY_CP_PLAYING_SOLO_ON_MAP = 0x12,
	PRESENCE_ACTIVITY_CP_PLAYING_COOP_IN_SAFEHOUSE = 0x13,
	PRESENCE_ACTIVITY_CP_PLAYING_SOLO_IN_SAFEHOUSE = 0x14,
	PRESENCE_ACTIVITY_CP_IN_LOBBY = 0x15,
	PRESENCE_ACTIVITY_CP_WATCHING_FILM = 0x16,
	PRESENCE_ACTIVITY_CP_LOOKING_FOR_PARTY = 0x17,
	PRESENCE_ACTIVITY_CP_LOOKING_FOR_PLAYERS = 0x18,
	PRESENCE_ACTIVITY_CP_PLAYING_LOCAL = 0x19,
	PRESENCE_ACTIVITY_CP_LAST = 0x1F,
	PRESENCE_ACTIVITY_MP_FIRST = 0x20,
	PRESENCE_ACTIVITY_MP_PLAYING_GMODE_ON_MAP = 0x21,
	PRESENCE_ACTIVITY_MP_IN_LOBBY = 0x22,
	PRESENCE_ACTIVITY_MP_WATCHING_FILM = 0x23,
	PRESENCE_ACTIVITY_MP_LOOKING_FOR_PARTY = 0x24,
	PRESENCE_ACTIVITY_MP_LOOKING_FOR_PLAYERS = 0x25,
	PRESENCE_ACTIVITY_MP_PLAYING_LOCAL = 0x26,
	PRESENCE_ACTIVITY_MP_LAST = 0x2F,
	PRESENCE_ACTIVITY_ZM_FIRST = 0x30,
	PRESENCE_ACTIVITY_ZM_PLAYING_MAP_ON_ROUND = 0x31,
	PRESENCE_ACTIVITY_ZM_IN_LOBBY = 0x32,
	PRESENCE_ACTIVITY_ZM_WATCHING_FILM = 0x33,
	PRESENCE_ACTIVITY_ZM_LOOKING_FOR_PARTY = 0x34,
	PRESENCE_ACTIVITY_ZM_LOOKING_FOR_PLAYERS = 0x35,
	PRESENCE_ACTIVITY_ZM_PLAYING_LOCAL = 0x36,
	PRESENCE_ACTIVITY_ZM_LAST = 0x3F,
	PRESENCE_ACTIVITY_LAST = 0x40,
};

enum LobbyJoinable
{
	LOBBY_JOINABLE_NO_NOT_IN_LOBBY = 0x0,
	LOBBY_JOINABLE_YES = 0x1,
	LOBBY_JOINABLE_YES_FRIENDS_ONLY = 0x2,
	LOBBY_JOINABLE_NO_PARTY_PRIVACY_INVITE_ONLY = 0x3,
	LOBBY_JOINABLE_NO_PARTY_PRIVACY_CLOSED = 0x4,
	LOBBY_JOINABLE_NO_PARTY_FULL = 0x5,
	LOBBY_JOINABLE_NO_GAME_FULL = 0x6,
	LOBBY_JOINABLE_NO_PLAYING_LOCAL = 0x7,
	LOBBY_JOINABLE_NO_GAME_PAUSED = 0x8,
	LOBBY_JOINABLE_NO = 0x9,
	LOBBY_JOINABLE_NO_YOU_NEED_DLC = 0xA,
	LOBBY_JOINABLE_COUNT = 0xB,
};

enum PresenceCtx
{
	PRESENCE_CTX_MENU_FIRST = 0x0,
	PRESENCE_CTX_UNKNOWN = 0x0,
	PRESENCE_CTX_MENU_MODE_SELECT = 0x1,
	PRESENCE_CTX_MENU_START = 0x2,
	PRESENCE_CTX_MENU_NOT_ACTIVE = 0x3,
	PRESENCE_CTX_MENU_LAST = 0xF,
	PRESENCE_CTX_CP_FIRST = 0x10,
	PRESENCE_CTX_CP_MAIN_MENU = 0x11,
	PRESENCE_CTX_CP_PRIVATE_GAME = 0x12,
	PRESENCE_CTX_CP_PUBLIC_MATCH = 0x13,
	PRESENCE_CTX_CP_THEATER = 0x14,
	PRESENCE_CTX_CP_LAST = 0x1F,
	PRESENCE_CTX_MP_FIRST = 0x20,
	PRESENCE_CTX_MP_MAIN_MENU = 0x21,
	PRESENCE_CTX_MP_CUSTOM_GAMES = 0x22,
	PRESENCE_CTX_MP_PUBLIC_MATCH = 0x23,
	PRESENCE_CTX_MP_THEATER = 0x24,
	PRESENCE_CTX_MP_LAST = 0x2F,
	PRESENCE_CTX_ZM_FIRST = 0x30,
	PRESENCE_CTX_ZM_MAIN_MENU = 0x31,
	PRESENCE_CTX_ZM_PRIVATE_GAME = 0x32,
	PRESENCE_CTX_ZM_PUBLIC_MATCH = 0x33,
	PRESENCE_CTX_ZM_THEATER = 0x34,
	PRESENCE_CTX_ZM_LAST = 0x3F,
	PRESENCE_CTX_LAST = 0x40,
};

enum PresencePrimary
{
	PRESENCE_PRIMARY_UNKNOWN = 0xFFFFFFFF,
	PRESENCE_PRIMARY_ONLINE = 0x0,
	PRESENCE_PRIMARY_LOCAL = 0x1,
	PRESENCE_PRIMARY_TITLE = 0x2,
	PRESENCE_PRIMARY_AWAY = 0x3,
	PRESENCE_PRIMARY_BLOCKED = 0x4,
};

enum IMType
{
	JOIN_REQUEST = 0x0,
	JOIN_REPLY = 0x1,
	INVITE = 0x2,
	UPDATE_INVITE_INFO = 0x3,
	NUM_INSTANT_MESSAGE_TYPES = 0x4,
};

enum MsgType
{
	MESSAGE_TYPE_NONE = 0xFFFFFFFF,
	MESSAGE_TYPE_INFO_REQUEST = 0x0,
	MESSAGE_TYPE_INFO_RESPONSE = 0x1,
	MESSAGE_TYPE_LOBBY_STATE_PRIVATE = 0x2,
	MESSAGE_TYPE_LOBBY_STATE_GAME = 0x3,
	MESSAGE_TYPE_LOBBY_STATE_GAMEPUBLIC = 0x4,
	MESSAGE_TYPE_LOBBY_STATE_GAMECUSTOM = 0x5,
	MESSAGE_TYPE_LOBBY_STATE_GAMETHEATER = 0x6,
	MESSAGE_TYPE_LOBBY_HOST_HEARTBEAT = 0x7,
	MESSAGE_TYPE_LOBBY_HOST_DISCONNECT = 0x8,
	MESSAGE_TYPE_LOBBY_HOST_DISCONNECT_CLIENT = 0x9,
	MESSAGE_TYPE_LOBBY_HOST_LEAVE_WITH_PARTY = 0xA,
	MESSAGE_TYPE_LOBBY_CLIENT_HEARTBEAT = 0xB,
	MESSAGE_TYPE_LOBBY_CLIENT_DISCONNECT = 0xC,
	MESSAGE_TYPE_LOBBY_CLIENT_RELIABLE_DATA = 0xD,
	MESSAGE_TYPE_LOBBY_CLIENT_CONTENT = 0xE,
	MESSAGE_TYPE_LOBBY_MODIFIED_STATS = 0xF,
	MESSAGE_TYPE_JOIN_LOBBY = 0x10,
	MESSAGE_TYPE_JOIN_RESPONSE = 0x11,
	MESSAGE_TYPE_JOIN_AGREEMENT_REQUEST = 0x12,
	MESSAGE_TYPE_JOIN_AGREEMENT_RESPONSE = 0x13,
	MESSAGE_TYPE_JOIN_COMPLETE = 0x14,
	MESSAGE_TYPE_JOIN_MEMBER_INFO = 0x15,
	MESSAGE_TYPE_SERVERLIST_INFO = 0x16,
	MESSAGE_TYPE_PEER_TO_PEER_CONNECTIVITY_TEST = 0x17,
	MESSAGE_TYPE_PEER_TO_PEER_INFO = 0x18,
	MESSAGE_TYPE_LOBBY_MIGRATE_TEST = 0x19,
	MESSAGE_TYPE_LOBBY_MIGRATE_ANNOUNCE_HOST = 0x1A,
	MESSAGE_TYPE_LOBBY_MIGRATE_START = 0x1B,
	MESSAGE_TYPE_INGAME_MIGRATE_TO = 0x1C,
	MESSAGE_TYPE_INGAME_MIGRATE_NEW_HOST = 0x1D,
	MESSAGE_TYPE_VOICE_PACKET = 0x1E,
	MESSAGE_TYPE_VOICE_RELAY_PACKET = 0x1F,
	MESSAGE_TYPE_DEMO_STATE = 0x20,
	MESSAGE_TYPE_COUNT = 0x21,
};

enum PackageType
{
	PACKAGE_TYPE_NONE = 0x0,
	PACKAGE_TYPE_WRITE = 0x1,
	PACKAGE_TYPE_READ = 0x2,
};

enum LobbyNetworkMode
{
	LOBBY_NETWORKMODE_INVALID = 0xFFFFFFFF,
	LOBBY_NETWORKMODE_UNKNOWN = 0x0,
	LOBBY_NETWORKMODE_LAN = 0x1,
	LOBBY_NETWORKMODE_LIVE = 0x2,
	LOBBY_NETWORKMODE_COUNT = 0x3,
	LOBBY_NETWORKMODE_LOCAL = 0x1,
};

enum LobbyMainMode
{
	LOBBY_MAINMODE_INVALID = 0xFFFFFFFF,
	LOBBY_MAINMODE_CP = 0x0,
	LOBBY_MAINMODE_MP = 0x1,
	LOBBY_MAINMODE_ZM = 0x2,
	LOBBY_MAINMODE_COUNT = 0x3,
};

enum eModes
{
	MODE_ZOMBIES = 0x0,
	MODE_MULTIPLAYER = 0x1,
	MODE_CAMPAIGN = 0x2,
	MODE_COUNT = 0x3,
	MODE_INVALID = 0x3,
	MODE_FIRST = 0x0,
};

enum clientplatform_t
{
	CLIENT_PLATFORM_PC = 0x0,
	CLIENT_PLATFORM_ORBIS = 0x1,
	CLIENT_PLATFORM_DURANGO = 0x2,
	MAX_CLIENT_PLATFORMS = 0x3,
};

enum PartyPrivacy
{
	PARTY_PRIVACY_OPEN = 0x0,
	PARTY_PRIVACY_FRIENDS_ONLY = 0x1,
	PARTY_PRIVACY_INVITE_ONLY = 0x2,
	PARTY_PRIVACY_CLOSED = 0x3,
	PARTY_PRIVACY_COUNT = 0x4,
};

enum SessionStatus
{
	SESSION_STATUS_INVALID = 0xFFFFFFFF,
	SESSION_STATUS_IDLE = 0x0,
	SESSION_STATUS_JOIN = 0x1,
	SESSION_STATUS_MERGE = 0x2,
	SESSION_STATUS_MIGRATE = 0x3,
	SESSION_STATUS_COUNT = 0x4,
};

enum GameServerStatus
{
	GAME_SERVER_STATUS_IDLE = 0x0,
	GAME_SERVER_STATUS_PRELOADING = 0x1,
	GAME_SERVER_STATUS_STARTING_SERVER = 0x2,
	GAME_SERVER_STATUS_MIGRATING = 0x3,
	GAME_SERVER_STATUS_RUNNING = 0x4,
	GAME_SERVER_STATUS_RUNNING_DEMO = 0x5,
};

enum eGameModes
{
	MODE_GAME_MATCHMAKING_PLAYLIST = 0x0,
	MODE_GAME_MATCHMAKING_MANUAL = 0x1,
	MODE_GAME_DEFAULT = 0x2,
	MODE_GAME_LEAGUE = 0x3,
	MODE_GAME_THEATER = 0x4,
	MODE_GAME_COUNT = 0x5,
	MODE_GAME_INVALID = 0x5,
};

enum LobbyPregameState
{
	LOBBY_PREGAME_STATE_IDLE = 0x0,
	LOBBY_PREGAME_STATE_ITEM_VOTE = 0x1,
	LOBBY_PREGAME_STATE_CHARACTER_DRAFT = 0x2,
	LOBBY_PREGAME_STATE_CAC_EDIT = 0x3,
	LOBBY_PREGAME_STATE_SCORESTREAK_EDIT = 0x4,
	LOBBY_PREGAME_STATE_LAUNCH_GAME = 0x5,
	LOBBY_PREGAME_STATE_COUNT = 0x6,
};

enum eAttachment
{
	ATTACHMENT_NOT_FOUND = 0xFFFFFFFF,
	ATTACHMENT_NONE = 0x0,
	ATTACHMENT_TYPE_FIRST = 0x1,
	ATTACHMENT_ACOG = 0x1,
	ATTACHMENT_DAMAGE = 0x2,
	ATTACHMENT_DUALCLIP = 0x3,
	ATTACHMENT_DUALOPTIC = 0x4,
	ATTACHMENT_DW = 0x5,
	ATTACHMENT_DYNZOOM = 0x6,
	ATTACHMENT_EXTBARREL = 0x7,
	ATTACHMENT_EXTCLIP = 0x8,
	ATTACHMENT_FASTADS = 0x9,
	ATTACHMENT_FASTRELOAD = 0xA,
	ATTACHMENT_FMJ = 0xB,
	ATTACHMENT_GL = 0xC,
	ATTACHMENT_GADGET_MOD_0 = 0xD,
	ATTACHMENT_GADGET_MOD_TAKE_TWO = 0xD,
	ATTACHMENT_GADGET_MOD_1 = 0xE,
	ATTACHMENT_GADGET_MOD_2 = 0xF,
	ATTACHMENT_GADGET_MOD_3 = 0x10,
	ATTACHMENT_GADGET_MOD_4 = 0x11,
	ATTACHMENT_GADGET_MOD_5 = 0x12,
	ATTACHMENT_GADGET_MOD_6 = 0x13,
	ATTACHMENT_GADGET_MOD_7 = 0x14,
	ATTACHMENT_GRIP = 0x15,
	ATTACHMENT_HOLO = 0x16,
	ATTACHMENT_IR = 0x17,
	ATTACHMENT_IRONSIGHTS = 0x18,
	ATTACHMENT_MK = 0x19,
	ATTACHMENT_MMS = 0x1A,
	ATTACHMENT_NOTRACER = 0x1B,
	ATTACHMENT_PRECISION = 0x1C,
	ATTACHMENT_QUICKDRAW = 0x1D,
	ATTACHMENT_RANGEFINDER = 0x1E,
	ATTACHMENT_RECON = 0x1F,
	ATTACHMENT_REDDOT = 0x20,
	ATTACHMENT_REFLEX = 0x21,
	ATTACHMENT_RF = 0x22,
	ATTACHMENT_SELECTFIRE = 0x23,
	ATTACHMENT_STACKFIRE = 0x24,
	ATTACHMENT_STALKER = 0x25,
	ATTACHMENT_STEADYAIM = 0x26,
	ATTACHMENT_SUPPLY = 0x27,
	ATTACHMENT_SUPPRESSED = 0x28,
	ATTACHMENT_SWAYREDUC = 0x29,
	ATTACHMENT_TACKNIFE = 0x2A,
	ATTACHMENT_VZOOM = 0x2B,
	ATTACHMENT_TYPE_LAST = 0x2B,
	ATTACHMENT_TYPE_COUNT = 0x2C,
	ATTACHMENT_INVALID = 0x2C,
};

enum team_t
{
	TEAM_FREE = 0x0,
	TEAM_BAD = 0x0,
	TEAM_DEAD = 0x0,
	TEAM_ALLIES = 0x1,
	TEAM_AXIS = 0x2,
	TEAM_THREE = 0x3,
	TEAM_FOUR = 0x4,
	TEAM_FIVE = 0x5,
	TEAM_SIX = 0x6,
	TEAM_SEVEN = 0x7,
	TEAM_EIGHT = 0x8,
	TEAM_NINE = 0x9,
	TEAM_TEN = 0xA,
	TEAM_ELEVEN = 0xB,
	TEAM_TWELVE = 0xC,
	TEAM_THIRTEEN = 0xD,
	TEAM_FOURTEEN = 0xE,
	TEAM_FIFTEEN = 0xF,
	TEAM_SIXTEEN = 0x10,
	TEAM_SEVENTEEN = 0x11,
	TEAM_EIGHTEEN = 0x12,
	TEAM_NEUTRAL = 0x13,
	TEAM_SPECTATOR = 0x14,
	TEAM_NUM_PLAYING_TEAMS = 0x14,
	TEAM_NUM_TEAMS = 0x15,
	TEAM_LOCALPLAYERS = 0x16,
	TEAM_FIRST_PLAYING_TEAM = 0x1,
	TEAM_LAST_PLAYING_TEAM = 0x13,
};

enum heroLoadoutTypes_e
{
	HERO_LOADOUT_TYPE_INVALID = 0xFFFFFFFF,
	HERO_LOADOUT_TYPE_FIRST = 0x0,
	HERO_LOADOUT_TYPE_WEAPON = 0x0,
	HERO_LOADOUT_TYPE_GADGET = 0x1,
	HERO_LOADOUT_TYPE_COUNT = 0x2,
};

enum VoteItemType
{
	VOTE_ITEM_TYPE_INVALID = 0x0,
	VOTE_ITEM_TYPE_ITEM = 0x1,
	VOTE_ITEM_TYPE_ATTACHMENT = 0x2,
	VOTE_ITEM_TYPE_ITEM_ATTACHMENT = 0x3,
	VOTE_ITEM_TYPE_ATTACHMENT_GROUP = 0x4,
	VOTE_ITEM_TYPE_COUNT = 0x5,
};

enum itemGroup_t
{
	ITEMGROUP_SMG = 0x0,
	ITEMGROUP_FIRST = 0x0,
	ITEMGROUP_ASSAULT = 0x1,
	ITEMGROUP_CQB = 0x2,
	ITEMGROUP_LMG = 0x3,
	ITEMGROUP_SNIPER = 0x4,
	ITEMGROUP_PISTOL = 0x5,
	ITEMGROUP_LAUNCHER = 0x6,
	ITEMGROUP_KNIFE = 0x7,
	ITEMGROUP_SPECIAL = 0x8,
	ITEMGROUP_SHOTGUN = 0x9,
	ITEMGROUP_EXPLOSIVE = 0xA,
	ITEMGROUP_GRENADE = 0xB,
	ITEMGROUP_MASTERKEY = 0xC,
	ITEMGROUP_GRENADELAUNCHER = 0xD,
	ITEMGROUP_FLAMETHROWER = 0xE,
	ITEMGROUP_SPECIALTY = 0xF,
	ITEMGROUP_SPECIALGRENADE = 0x10,
	ITEMGROUP_MISCWEAPON = 0x11,
	ITEMGROUP_FEATURE = 0x12,
	ITEMGROUP_BONUSCARD = 0x13,
	ITEMGROUP_CYBERCOM_TACRIG = 0x14,
	ITEMGROUP_GLOBAL_ITEMS_START = 0x15,
	ITEMGROUP_KILLSTREAK = 0x15,
	ITEMGROUP_HERO = 0x16,
	ITEMGROUP_BUBBLEGUM = 0x17,
	ITEMGROUP_BUBBLEGUM_CONSUMABLE = 0x18,
	ITEMGROUP_CYBERCOM_CORE = 0x19,
	ITEMGROUP_CYBERCOM_ABILITIES = 0x1A,
	ITEMGROUP_COUNT = 0x1B,
	ITEMGROUP_INVALID = 0xFFFFFFFF,
};

enum VoteType
{
	VOTE_TYPE_INVALID = 0x0,
	VOTE_TYPE_BAN = 0x1,
	VOTE_TYPE_PROTECT = 0x2,
	VOTE_TYPE_COUNT = 0x3,
};

enum LobbyMapVote
{
	LOBBY_MAPVOTE_INVALID = 0xFFFFFFFF,
	LOBBY_MAPVOTE_NONE = 0x0,
	LOBBY_MAPVOTE_NEXT = 0x1,
	LOBBY_MAPVOTE_PREVIOUS = 0x2,
	LOBBY_MAPVOTE_RANDOM = 0x3,
};

enum LobbyClientPregameState
{
	LOBBY_CLIENT_PREGAME_STATE_IDLE = 0x0,
	LOBBY_CLIENT_PREGAME_STATE_SELECTING = 0x1,
	LOBBY_CLIENT_PREGAME_STATE_SELECTED = 0x2,
	LOBBY_CLIENT_PREGAME_STATE_SELECTION_FORCED = 0x3,
	LOBBY_CLIENT_PREGAME_STATE_COUNT = 0x4,
};

enum JoinResult
{
	JOIN_RESULT_INVALID = 0x0,
	JOIN_RESULT_SUCCESS = 0x1,
	JOIN_RESULT_CONNECT_TO_HOST_FAILURE = 0x2,
	JOIN_RESULT_PROBE_SEND_FAILURE = 0x3,
	JOIN_RESULT_PROBE_TIMEOUT = 0x4,
	JOIN_RESULT_PROBE_INVALID_LOBBY = 0x5,
	JOIN_RESULT_PROBE_INVALID_INFO = 0x6,
	JOIN_RESULT_PROBE_RESULT_INVALID = 0x7,
	JOIN_RESULT_INVALID_LOBBY = 0x8,
	JOIN_RESULT_SEND_AGREEMENT_REQUEST_FAILED = 0x9,
	JOIN_RESULT_HANDSHAKE_WINDOW_EXPIRED = 0xA,
	JOIN_RESULT_AGREEMENT_WINDOW_EXPIRED = 0xB,
	JOIN_RESULT_JOIN_DISABLED = 0xC,
	JOIN_RESULT_JOIN_ALREADY_IN_PROGRESS = 0xD,
	JOIN_RESULT_NOT_JOINABLE_NOT_HOSTING = 0xE,
	JOIN_RESULT_NOT_JOINABLE_NOT_IDLE = 0xF,
	JOIN_RESULT_NOT_JOINABLE_CLOSED = 0x10,
	JOIN_RESULT_NOT_JOINABLE_INVITE_ONLY = 0x11,
	JOIN_RESULT_NOT_JOINABLE_FRIENDS_ONLY = 0x12,
	JOIN_RESULT_LOBBY_FULL = 0x13,
	JOIN_RESULT_NETWORK_MODE_MISMATCH = 0x14,
	JOIN_RESULT_MISMATCH_PLAYLISTID = 0x15,
	JOIN_RESULT_MISMATCH_PLAYLIST_VERSION_TO_NEW = 0x16,
	JOIN_RESULT_MISMATCH_PLAYLIST_VERSION_TO_OLD = 0x17,
	JOIN_RESULT_MISMATCH_PROTOCOL_VERSION = 0x18,
	JOIN_RESULT_MISMATCH_NETFIELD_CHECKSUM = 0x19,
	JOIN_RESULT_MISMATCH_FFOTD_VERSION_TO_NEW = 0x1A,
	JOIN_RESULT_MISMATCH_FFOTD_VERSION_TO_OLD = 0x1B,
	JOIN_RESULT_MIGRATE_IN_PROGRESS = 0x1C,
	JOIN_RESULT_COULD_NOT_RESERVE = 0x1D,
	JOIN_RESPONSE_COUNT = 0x1E,
};

enum ControllerIndex_t2
{
	INVALID_CONTROLLER_PORT = 0xFFFFFFFF,
	CONTROLLER_INDEX_FIRST = 0x0,
	CONTROLLER_INDEX_0 = 0x0,
	CONTROLLER_INDEX_1 = 0x1,
	CONTROLLER_INDEX_2 = 0x2,
	CONTROLLER_INDEX_3 = 0x3,
	CONTROLLER_INDEX_COUNT = 0x4,
};

enum StorageFileType
{
	STORAGE_COMMON_SETTINGS = 0x0,
	STORAGE_PROFILE_SHOUTCASTER = 0x1,
	STORAGE_CP_SAVEGAME_ONLINE = 0x2,
	STORAGE_CP_SAVEGAME_OFFLINE = 0x3,
	STORAGE_CPNIGHTMARE_SAVEGAME_ONLINE = 0x4,
	STORAGE_CPNIGHTMARE_SAVEGAME_OFFLINE = 0x5,
	STORAGE_CP_STATS_ONLINE = 0x6,
	STORAGE_CP_STATS_OFFLINE = 0x7,
	STORAGE_CP_STATS_NIGHTMARE_ONLINE = 0x8,
	STORAGE_CP_STATS_NIGHTMARE_OFFLINE = 0x9,
	STORAGE_CP_LOADOUTS = 0xA,
	STORAGE_CP_LOADOUTS_OFFLINE = 0xB,
	STORAGE_MP_STATS_ONLINE = 0xC,
	STORAGE_MP_STATS_OFFLINE = 0xD,
	STORAGE_MP_LOADOUTS = 0xE,
	STORAGE_MP_LOADOUTS_CUSTOM = 0xF,
	STORAGE_MP_LOADOUTS_ARENA = 0x10,
	STORAGE_MP_LOADOUTS_OFFLINE = 0x11,
	STORAGE_MP_CLASS_SETS = 0x12,
	STORAGE_ZM_STATS_ONLINE = 0x13,
	STORAGE_ZM_STATS_OFFLINE = 0x14,
	STORAGE_ZM_LOADOUTS = 0x15,
	STORAGE_ZM_LOADOUTS_OFFLINE = 0x16,
	STORAGE_FR_STATS_ONLINE = 0x17,
	STORAGE_FR_STATS_OFFLINE = 0x18,
	STORAGE_PAINTSHOP_DATA = 0x19,
	STORAGE_GUNSMITH = 0x1A,
	STORAGE_PAINTJOBS = 0x1B,
	STORAGE_EMBLEMS = 0x1C,
	STORAGE_DEFAULT_EMBLEMS = 0x1D,
	STORAGE_EMBLEMS_LOOT = 0x1E,
	STORAGE_CUSTOM_GAMES = 0x1F,
	STORAGE_OFFICIAL_CUSTOM_GAMES = 0x20,
	STORAGE_EXTERNAL_DATA = 0x21,
	STORAGE_FILE_COUNT = 0x22,
	STORAGE_FILE_FIRST = 0x0,
	STORAGE_FILE_INVALID = 0xFFFFFFFF,
};

enum QueryId
{
	ENUM_SEARCH_SESSIONS_INVALID = 0x0,
	ENUM_SEARCH_SESSIONS_BY_PLAYLIST_VERSION = 0x1,
	ENUM_SEARCH_SESSIONS = 0x2,
	ENUM_SEARCH_SESSION_BY_GAME_SECURITY_ID = 0x3,
	ENUM_SEARCH_SESSION_DEDICATED = 0x4,
	ENUM_SEARCH_SESSIONS_DEDICATED_PARKED = 0x5,
};

enum SearchState
{
	SEARCH_STATE_IDLE = 0x0,
	SEARCH_STATE_SEARCH = 0x1,
	SEARCH_STATE_SEARCHING = 0x2,
	SEARCH_STATE_COMPLETE = 0x3,
};

enum bdLobbyErrorCode
{
	BD_NO_ERROR = 0x0,
	BD_TOO_MANY_TASKS = 0x1,
	BD_NOT_CONNECTED = 0x2,
	BD_SEND_FAILED = 0x3,
	BD_HANDLE_TASK_FAILED = 0x4,
	BD_START_TASK_FAILED = 0x5,
	BD_RESULT_EXCEEDS_BUFFER_SIZE = 0x64,
	BD_ACCESS_DENIED = 0x65,
	BD_EXCEPTION_IN_DB = 0x66,
	BD_MALFORMED_TASK_HEADER = 0x67,
	BD_INVALID_ROW = 0x68,
	BD_EMPTY_ARG_LIST = 0x69,
	BD_PARAM_PARSE_ERROR = 0x6A,
	BD_PARAM_MISMATCHED_TYPE = 0x6B,
	BD_SERVICE_NOT_AVAILABLE = 0x6C,
	BD_CONNECTION_RESET = 0x6D,
	BD_INVALID_USER_ID = 0x6E,
	BD_LOBBY_PROTOCOL_VERSION_FAILURE = 0x6F,
	BD_LOBBY_INTERNAL_FAILURE = 0x70,
	BD_LOBBY_PROTOCOL_ERROR = 0x71,
	BD_LOBBY_FAILED_TO_DECODE_UTF8 = 0x72,
	BD_LOBBY_ASCII_EXPECTED = 0x73,
	BD_INVALID_CONTEXT = 0x74,
	BD_LOBBY_METHOD_DISABLED = 0x75,
	BD_ASYNCHRONOUS_ERROR = 0xC8,
	BD_STREAMING_COMPLETE = 0xC9,
	BD_MEMBER_NO_PROPOSAL = 0x12C,
	BD_TEAMNAME_ALREADY_EXISTS = 0x12D,
	BD_MAX_TEAM_MEMBERSHIPS_LIMITED = 0x12E,
	BD_MAX_TEAM_OWNERSHIPS_LIMITED = 0x12F,
	BD_NOT_A_TEAM_MEMBER = 0x130,
	BD_INVALID_TEAM_ID = 0x131,
	BD_INVALID_TEAM_NAME = 0x132,
	BD_NOT_A_TEAM_OWNER = 0x133,
	BD_NOT_AN_ADMIN_OR_OWNER = 0x134,
	BD_MEMBER_PROPOSAL_EXISTS = 0x135,
	BD_MEMBER_EXISTS = 0x136,
	BD_TEAM_FULL = 0x137,
	BD_VULGAR_TEAM_NAME = 0x138,
	BD_TEAM_USERID_BANNED = 0x139,
	BD_TEAM_EMPTY = 0x13A,
	BD_INVALID_TEAM_PROFILE_QUERY_ID = 0x13B,
	BD_TEAMNAME_TOO_SHORT = 0x13C,
	BD_UNIQUE_PROFILE_DATA_EXISTS_ALREADY = 0x13D,
	BD_APPLICATION_EXISTS = 0x13E,
	BD_APPLICATIONS_MAX_EXCEEDED = 0x13F,
	BD_PAGE_SIZE_LIMIT_EXCEEDED = 0x140,
	BD_APPLICATION_REJECTED_EXISTS = 0x141,
	BD_APPLICATION_WITHDRAWN_EXISTS = 0x142,
	BD_APPLICATION_DOES_NOT_EXIST = 0x143,
	BD_APPLICATION_INVALID_STATE = 0x144,
	BD_MEMBER_BAN_EXISTS = 0x145,
	BD_MEMBER_BAN_DOES_NOT_EXIST = 0x146,
	BD_OWNER_BAN_FORBIDDEN = 0x147,
	BD_INVALID_ACCOUNT_TYPE = 0x148,
	BD_CONFIGURED_ACCOUNT_TYPE_NOT_FOUND = 0x149,
	BD_OWNER_OF_NON_EMPTY_TEAM = 0x14A,
	BD_CANNOT_APPLY_TO_PIRIVATE_TEAM = 0x14B,
	BD_MAX_NUMBER_OF_PROPOSALS_EXCEEDED = 0x14D,
	BD_MEMBER_IS_OWNER = 0x15E,
	BD_AUTO_JOINING_DISABLED = 0x15F,
	BD_TEAM_SHOWCASE_DISABLED = 0x160,
	BD_INVALID_FILTER = 0x162,
	BD_INVALID_TEAM_LEADERBOARD = 0x163,
	BD_TEAM_LEADERBOARD_LOADING = 0x164,
	BD_TEAM_SHOWCASE_COUNT_EXCEEDED = 0x165,
	BD_INVALID_LEADERBOARD_ID = 0x190,
	BD_INVALID_STATS_SET = 0x191,
	BD_EMPTY_STATS_SET_IGNORED = 0x193,
	BD_NO_DIRECT_ACCESS_TO_ARBITRATED_LBS = 0x194,
	BD_STATS_WRITE_PERMISSION_DENIED = 0x195,
	BD_STATS_WRITE_TYPE_DATA_TYPE_MISMATCH = 0x196,
	BD_NO_STATS_FOR_USER = 0x197,
	BD_INVALID_ACCESS_TO_UNRANKED_LB = 0x198,
	BD_INVALID_EXTERNAL_TITLE_ID = 0x199,
	BD_DIFFERENT_LEADERBOARD_SCHEMAS = 0x19A,
	BD_TOO_MANY_LEADERBOARDS_REQUESTED = 0x19B,
	BD_ENTITLEMENTS_ERROR = 0x19C,
	BD_ENTITLEMENTS_INVALID_TITLEID = 0x19D,
	BD_ENTITLEMENTS_INVALID_LEADERBOARDID = 0x19E,
	BD_ENTITLEMENTS_INVALID_GET_MODE_FOR_TITLE = 0x19F,
	BD_ENTITLEMENTS_URL_CONNECTION_ERROR = 0x1A0,
	BD_ENTITLEMENTS_CONFIG_ERROR = 0x1A1,
	BD_ENTITLEMENTS_NAMED_PARENT_ERROR = 0x1A2,
	BD_ENTITLEMENTS_NAMED_KEY_ERROR = 0x1A3,
	BD_TOO_MANY_ENTITY_IDS_REQUESTED = 0x1A4,
	BD_STATS_READ_FAILED = 0x1A5,
	BD_STATS_INVALID_WRITE_TO_VIRTUAL_LEADERBOARD = 0x1A6,
	BD_STATS_INVALID_WRITE_TYPE_TO_MULTIRANK_LB = 0x1A7,
	BD_INVALID_TITLE_ID = 0x1F4,
	BD_DOWN_FOR_MAINTENANCE = 0x1F5,
	BD_MESSAGING_INVALID_MAIL_ID = 0x258,
	BD_SELF_BLOCK_NOT_ALLOWED = 0x259,
	BD_GLOBAL_MESSAGE_ACCESS_DENIED = 0x25A,
	BD_GLOBAL_MESSAGES_USER_LIMIT_EXCEEDED = 0x25B,
	BD_MESSAGING_SENDER_DOES_NOT_EXIST = 0x25C,
	BD_AUTH_NO_ERROR = 0x2BC,
	BD_AUTH_BAD_REQUEST = 0x2BD,
	BD_AUTH_SERVER_CONFIG_ERROR = 0x2BE,
	BD_AUTH_BAD_TITLE_ID = 0x2BF,
	BD_AUTH_BAD_ACCOUNT = 0x2C0,
	BD_AUTH_ILLEGAL_OPERATION = 0x2C1,
	BD_AUTH_INCORRECT_LICENSE_CODE = 0x2C2,
	BD_AUTH_CREATE_USERNAME_EXISTS = 0x2C3,
	BD_AUTH_CREATE_USERNAME_ILLEGAL = 0x2C4,
	BD_AUTH_CREATE_USERNAME_VULGAR = 0x2C5,
	BD_AUTH_CREATE_MAX_ACC_EXCEEDED = 0x2C6,
	BD_AUTH_MIGRATE_NOT_SUPPORTED = 0x2C7,
	BD_AUTH_TITLE_DISABLED = 0x2C8,
	BD_AUTH_ACCOUNT_EXPIRED = 0x2C9,
	BD_AUTH_ACCOUNT_LOCKED = 0x2CA,
	BD_AUTH_UNKNOWN_ERROR = 0x2CB,
	BD_AUTH_INCORRECT_PASSWORD = 0x2CC,
	BD_AUTH_IP_NOT_IN_ALLOWED_RANGE = 0x2CD,
	BD_AUTH_WII_TOKEN_VERIFICATION_FAILED = 0x2CE,
	BD_AUTH_WII_AUTHENTICATION_FAILED = 0x2CF,
	BD_AUTH_IP_KEY_LIMIT_REACHED = 0x2D0,
	BD_AUTH_INVALID_GSPID = 0x2D1,
	BD_AUTH_INVALID_IP_RANGE_ID = 0x2D2,
	BD_AUTH_3DS_TOKEN_VERIFICATION_FAILED = 0x2D1,
	BD_AUTH_3DS_AUTHENTICATION_FAILED = 0x2D2,
	BD_AUTH_STEAM_APP_ID_MISMATCH = 0x2D3,
	BD_AUTH_ABACCOUNTS_APP_ID_MISMATCH = 0x2D4,
	BD_AUTH_CODO_USERNAME_NOT_SET = 0x2D5,
	BD_AUTH_WIIU_TOKEN_VERIFICATION_FAILED = 0x2D6,
	BD_AUTH_WIIU_AUTHENTICATION_FAILED = 0x2D7,
	BD_AUTH_CODO_USERNAME_NOT_BASE64 = 0x2D8,
	BD_AUTH_CODO_USERNAME_NOT_UTF8 = 0x2D9,
	BD_AUTH_TENCENT_TICKET_EXPIRED = 0x2DA,
	BD_AUTH_PS3_SERVICE_ID_MISMATCH = 0x2DB,
	BD_AUTH_CODOID_NOT_WHITELISTED = 0x2DC,
	BD_AUTH_PLATFORM_TOKEN_RETRIEVAL_ERROR = 0x2DD,
	BD_AUTH_JSON_FORMAT_ERROR = 0x2DE,
	BD_AUTH_REPLY_CONTENT_ERROR = 0x2DF,
	BD_AUTH_PLATFORM_TOKEN_EXPIRED = 0x2E0,
	BD_AUTH_CONTINUING = 0x2E1,
	BD_AUTH_PLATFORM_TOKEN_DECRYPTION_ERROR = 0x2E2,
	BD_AUTH_PLATFORM_TOKEN_SIGNATURE_ERROR = 0x2E3,
	BD_AUTH_DNS_RESOLUTION_ERROR = 0x2E4,
	BD_AUTH_SSL_CERTIFICATE_ERROR = 0x2E5,
	BD_AUTH_SERVER_UNAVAILABLE_ERROR = 0x2E6,
	BD_AUTH_ENVIRONMENT_ERROR = 0x2E7,
	BD_AUTH_PLATFORM_DEVICE_ID_ERROR = 0x2E8,
	BD_AUTH_UNO_APP_ID_MISMATCH = 0x2E9,
	BD_AUTH_UNICODE_DECODE_ERROR = 0x2EA,
	BD_AUTH_STEAM_PUBLISHER_BAN = 0x2EB,
	BD_AUTH_TICKET_DECRYPTION_ERROR = 0x2EC,
	BD_AUTH_SIGNATURE_ERROR = 0x2ED,
	BD_AUTH_SINGLE_IDENTITY_FLOW_DISABLED_ERROR = 0x2F0,
	BD_AUTH_SINGLE_IDENTITY_TOKEN_MISSING_ERROR = 0x2F1,
	BD_AUTH_SINGLE_IDENTITY_TOKEN_EXPIRED_ERROR = 0x2F2,
	BD_AUTH_SINGLE_IDENTITY_TOKEN_INVALID_ERROR = 0x2F3,
	BD_NO_PROFILE_INFO_EXISTS = 0x320,
	BD_FRIENDSHIP_NOT_REQUSTED = 0x384,
	BD_NOT_A_FRIEND = 0x385,
	BD_SELF_FRIENDSHIP_NOT_ALLOWED = 0x387,
	BD_FRIENDSHIP_EXISTS = 0x388,
	BD_PENDING_FRIENDSHIP_EXISTS = 0x389,
	BD_USERID_BANNED = 0x38A,
	BD_FRIENDS_FULL = 0x38C,
	BD_FRIENDS_NO_RICH_PRESENCE = 0x38D,
	BD_RICH_PRESENCE_TOO_LARGE = 0x38E,
	BD_NO_FILE = 0x3E8,
	BD_PERMISSION_DENIED = 0x3E9,
	BD_FILESIZE_LIMIT_EXCEEDED = 0x3EA,
	BD_FILENAME_MAX_LENGTH_EXCEEDED = 0x3EB,
	BD_EXTERNAL_STORAGE_SERVICE_ERROR = 0x3EC,
	BD_VALIDATION_ERROR = 0x3ED,
	BD_CHANNEL_DOES_NOT_EXIST = 0x44D,
	BD_CHANNEL_ALREADY_SUBSCRIBED = 0x44E,
	BD_CHANNEL_NOT_SUBSCRIBED = 0x44F,
	BD_CHANNEL_FULL = 0x450,
	BD_CHANNEL_SUBSCRIPTIONS_FULL = 0x451,
	BD_CHANNEL_NO_SELF_WHISPERING = 0x452,
	BD_CHANNEL_ADMIN_REQUIRED = 0x453,
	BD_CHANNEL_TARGET_NOT_SUBSCRIBED = 0x454,
	BD_CHANNEL_REQUIRES_PASSWORD = 0x455,
	BD_CHANNEL_TARGET_IS_SELF = 0x456,
	BD_CHANNEL_PUBLIC_BAN_NOT_ALLOWED = 0x457,
	BD_CHANNEL_USER_BANNED = 0x458,
	BD_CHANNEL_PUBLIC_PASSWORD_NOT_ALLOWED = 0x459,
	BD_CHANNEL_PUBLIC_KICK_NOT_ALLOWED = 0x45A,
	BD_CHANNEL_MUTED = 0x45B,
	BD_EVENT_DESC_TRUNCATED = 0x4B0,
	BD_CONTENT_UNLOCK_UNKNOWN_ERROR = 0x514,
	BD_UNLOCK_KEY_INVALID = 0x515,
	BD_UNLOCK_KEY_ALREADY_USED_UP = 0x516,
	BD_CONTENT_UNLOCK_LIMIT_REACHED = 0x517,
	BD_DIFFERENT_HARDWARE_ID = 0x518,
	BD_INVALID_CONTENT_OWNER = 0x519,
	BD_CONTENT_UNLOCK_INVALID_USER = 0x51A,
	BD_CONTENT_UNLOCK_INVALID_CATEGORY = 0x51B,
	BD_KEY_ARCHIVE_INVALID_WRITE_TYPE = 0x5DC,
	BD_KEY_ARCHIVE_EXCEEDED_MAX_IDS_PER_REQUEST = 0x5DD,
	BD_BANDWIDTH_TEST_TRY_AGAIN = 0x712,
	BD_BANDWIDTH_TEST_STILL_IN_PROGRESS = 0x713,
	BD_BANDWIDTH_TEST_NOT_PROGRESS = 0x714,
	BD_BANDWIDTH_TEST_SOCKET_ERROR = 0x715,
	BD_INVALID_SESSION_NONCE = 0x76D,
	BD_ARBITRATION_FAILURE = 0x76F,
	BD_ARBITRATION_USER_NOT_REGISTERED = 0x771,
	BD_ARBITRATION_NOT_CONFIGURED = 0x772,
	BD_CONTENTSTREAMING_FILE_NOT_AVAILABLE = 0x7D0,
	BD_CONTENTSTREAMING_STORAGE_SPACE_EXCEEDED = 0x7D1,
	BD_CONTENTSTREAMING_NUM_FILES_EXCEEDED = 0x7D2,
	BD_CONTENTSTREAMING_UPLOAD_BANDWIDTH_EXCEEDED = 0x7D3,
	BD_CONTENTSTREAMING_FILENAME_MAX_LENGTH_EXCEEDED = 0x7D4,
	BD_CONTENTSTREAMING_MAX_THUMB_DATA_SIZE_EXCEEDED = 0x7D5,
	BD_CONTENTSTREAMING_DOWNLOAD_BANDWIDTH_EXCEEDED = 0x7D6,
	BD_CONTENTSTREAMING_NOT_ENOUGH_DOWNLOAD_BUFFER_SPACE = 0x7D7,
	BD_CONTENTSTREAMING_SERVER_NOT_CONFIGURED = 0x7D8,
	BD_CONTENTSTREAMING_INVALID_APPLE_RECEIPT = 0x7DA,
	BD_CONTENTSTREAMING_APPLE_STORE_NOT_AVAILABLE = 0x7DB,
	BD_CONTENTSTREAMING_APPLE_RECEIPT_FILENAME_MISMATCH = 0x7DC,
	BD_CONTENTSTREAMING_BATCH_DOWNLOAD_PARTIAL_FAILURE = 0x7DD,
	BD_CONTENTSTREAMING_HTTP_ERROR = 0x7E4,
	BD_CONTENTSTREAMING_FAILED_TO_START_HTTP = 0x7E5,
	BD_CONTENTSTREAMING_LOCALE_INVALID = 0x7E6,
	BD_CONTENTSTREAMING_LOCALE_MISSING = 0x7E7,
	BD_VOTERANK_ERROR_EMPTY_RATING_SUBMISSION = 0x7EE,
	BD_VOTERANK_ERROR_MAX_VOTES_EXCEEDED = 0x7EF,
	BD_VOTERANK_ERROR_INVALID_RATING = 0x7F0,
	BD_MAX_NUM_TAGS_EXCEEDED = 0x82A,
	BD_TAGGED_COLLECTION_DOES_NOT_EXIST = 0x82B,
	BD_EMPTY_TAG_ARRAY = 0x82C,
	BD_SEARCH_SERVER_UNREACHABLE = 0x82F,
	BD_ENTITY_ID_NOT_SPECIFIED = 0x830,
	BD_INVALID_QUERY_ID = 0x834,
	BD_NO_ENTRY_TO_UPDATE = 0x835,
	BD_SESSION_INVITE_EXISTS = 0x836,
	BD_INVALID_SESSION_ID = 0x837,
	BD_ATTACHMENT_TOO_LARGE = 0x838,
	BD_INVALID_FIELD_VALUE = 0x839,
	BD_INVALID_GROUP_ID = 0xAF0,
	BD_MAIL_INVALID_MAIL_ID_ERROR = 0xB55,
	BD_MAIL_PERMISSION_DENIED_ERROR = 0xB56,
	BD_TWITCH_SERVICE_ERROR = 0xC1D,
	BD_TWITCH_ACCOUNT_ALREADY_LINKED = 0xC1E,
	BD_TWITCH_NO_LINKED_ACCOUNT = 0xC1F,
	BD_YOUTUBE_SERVICE_ERROR = 0xCE5,
	BD_YOUTUBE_SERVICE_COMMUNICATION_ERROR = 0xCE6,
	BD_YOUTUBE_USER_DENIED_AUTHORIZATION = 0xCE7,
	BD_YOUTUBE_AUTH_MAX_TIME_EXCEEDED = 0xCE8,
	BD_YOUTUBE_USER_UNAUTHORIZED = 0xCE9,
	BD_YOUTUBE_UPLOAD_MAX_TIME_EXCEEDED = 0xCEA,
	BD_YOUTUBE_DUPLICATE_UPLOAD = 0xCEB,
	BD_YOUTUBE_FAILED_UPLOAD = 0xCEC,
	BD_YOUTUBE_ACCOUNT_ALREADY_REGISTERED = 0xCED,
	BD_YOUTUBE_ACCOUNT_NOT_REGISTERED = 0xCEE,
	BD_YOUTUBE_CONTENT_SERVER_ERROR = 0xCEF,
	BD_YOUTUBE_UPLOAD_DOES_NOT_EXIST = 0xCF0,
	BD_YOUTUBE_NO_LINKED_ACCOUNT = 0xCF1,
	BD_YOUTUBE_DEVELOPER_TAGS_INVALID = 0xCF2,
	BD_TWITTER_AUTH_ATTEMPT_FAILED = 0xDAD,
	BD_TWITTER_AUTH_TOKEN_INVALID = 0xDAE,
	BD_TWITTER_UPDATE_LIMIT_REACHED = 0xDAF,
	BD_TWITTER_UNAVAILABLE = 0xDB0,
	BD_TWITTER_ERROR = 0xDB1,
	BD_TWITTER_TIMED_OUT = 0xDB2,
	BD_TWITTER_ACCOUNT_AMBIGUOUS = 0xDB4,
	BD_TWITTER_MAXIMUM_ACCOUNTS_REACHED = 0xDB5,
	BD_TWITTER_ACCOUNT_NOT_REGISTERED = 0xDB6,
	BD_TWITTER_DUPLICATE_STATUS = 0xDB7,
	BD_TWITTER_ACCOUNT_ALREADY_REGISTERED = 0xE1C,
	BD_FACEBOOK_AUTH_ATTEMPT_FAILED = 0xE11,
	BD_FACEBOOK_AUTH_TOKEN_INVALID = 0xE12,
	BD_FACEBOOK_PHOTO_DOES_NOT_EXIST = 0xE13,
	BD_FACEBOOK_PHOTO_INVALID = 0xE14,
	BD_FACEBOOK_PHOTO_ALBUM_FULL = 0xE15,
	BD_FACEBOOK_UNAVAILABLE = 0xE16,
	BD_FACEBOOK_ERROR = 0xE17,
	BD_FACEBOOK_TIMED_OUT = 0xE18,
	BD_FACEBOOK_DISABLED_FOR_USER = 0xE19,
	BD_FACEBOOK_ACCOUNT_AMBIGUOUS = 0xE1A,
	BD_FACEBOOK_MAXIMUM_ACCOUNTS_REACHED = 0xE1B,
	BD_FACEBOOK_INVALID_NUM_PICTURES_REQUESTED = 0xE1C,
	BD_FACEBOOK_VIDEO_DOES_NOT_EXIST = 0xE1D,
	BD_FACEBOOK_ACCOUNT_ALREADY_REGISTERED = 0xE1E,
	BD_FACEBOOK_TARGET_OBJECT_ID_INVALID = 0xE1F,
	BD_FACEBOOK_NO_SUCH_ACCOUNT = 0xE20,
	BD_APNS_INVALID_PAYLOAD = 0xE74,
	BD_APNS_INVALID_TOKEN_LENGTH_ERROR = 0xE76,
	BD_MAX_CONSOLEID_LENGTH_EXCEEDED = 0xEE1,
	BD_MAX_WHITELIST_LENGTH_EXCEEDED = 0xEE2,
	BD_TOTP_CHALLENGE_FAILED = 0xEE3,
	BD_NO_TOTP_ACCOUNT = 0xEE4,
	BD_EXTENDED_AUTH_INFO_ERROR = 0xEE5,
	BD_EXTENDED_AUTH_INFO_LENGTH_EXCEEDED = 0xEE6,
	BD_EXTENDED_AUTH_INFO_EXPIRED = 0xEE7,
	BD_WHITELIST_TRAILING_WHITE_SPACE = 0xEE8,
	BD_USERGROUP_NAME_ALREADY_EXISTS = 0x1770,
	BD_INVALID_USERGROUP_ID = 0x1771,
	BD_USER_ALREADY_IN_USERGROUP = 0x1772,
	BD_USER_NOT_IN_USERGROUP = 0x1773,
	BD_INVALID_USERGROUP_MEMBER_TYPE = 0x1774,
	BD_TOO_MANY_MEMBERS_REQUESTED = 0x1775,
	BD_USERGROUP_NAME_TOO_SHORT = 0x1776,
	BD_RICH_PRESENCE_DATA_TOO_LARGE = 0x1A90,
	BD_RICH_PRESENCE_TOO_MANY_USERS = 0x1A91,
	BD_PRESENCE_DATA_TOO_LARGE = 0x283C,
	BD_PRESENCE_TOO_MANY_USERS = 0x283D,
	BD_USER_LOGGED_IN_OTHER_TITLE = 0x283E,
	BD_USER_NOT_LOGGED_IN = 0x283F,
	BD_PRESENCE_INVALID_PLATFORM = 0x2840,
	BD_SUBSCRIPTION_TOO_MANY_USERS = 0x1B58,
	BD_SUBSCRIPTION_TICKET_PARSE_ERROR = 0x1B59,
	BD_CODO_ID_INVALID_DATA = 0x1BBC,
	BD_INVALID_MESSAGE_FORMAT = 0x1BBD,
	BD_TLOG_TOO_MANY_MESSAGES = 0x1BBE,
	BD_CODO_ID_NOT_IN_WHITELIST = 0x1BBF,
	BD_TLOG_MESSAGE_TRANSFORMATION_ERROR = 0x1BC0,
	BD_REWARDS_NOT_ENABLED = 0x1BC1,
	BD_REWARDS_INVALID_RULE = 0x1BC2,
	BD_REDEEM_NAME_CHANGE_INTERNAL_ERROR = 0x1BC3,
	BD_REDEEM_NAME_CHANGE_INVALID_ITEM = 0x1BC4,
	BD_REDEEM_NAME_CHANGE_UNAVAILABLE_ITEM = 0x1BC5,
	BD_REDEEM_NAME_CHANGE_IN_PROGRESS = 0x1BC6,
	BD_REDEEM_NAME_CHANGE_INACTIVE_REQUEST = 0x1BC7,
	BD_REDEEM_NAME_CHANGE_INVALID_NAME = 0x1BC8,
	BD_REDEEM_NAME_CHANGE_SAME_NAME = 0x1BC9,
	BD_REDEEM_NAME_CHANGE_DUPLICATE_NAME = 0x1BCA,
	BD_TENCENT_NO_APPLICABLE_REWARDS = 0x1BCB,
	BD_MARKETPLACE_ERROR = 0x1F40,
	BD_MARKETPLACE_RESOURCE_NOT_FOUND = 0x1F41,
	BD_MARKETPLACE_INVALID_CURRENCY = 0x1F42,
	BD_MARKETPLACE_INVALID_PARAMETER = 0x1F43,
	BD_MARKETPLACE_RESOURCE_CONFLICT = 0x1F44,
	BD_MARKETPLACE_STORAGE_ERROR = 0x1F45,
	BD_MARKETPLACE_INTEGRITY_ERROR = 0x1F46,
	BD_MARKETPLACE_INSUFFICIENT_FUNDS_ERROR = 0x1F47,
	BD_MARKETPLACE_MMP_SERVICE_ERROR = 0x1F48,
	BD_MARKETPLACE_PRECONDITION_REQUIRED = 0x1F49,
	BD_MARKETPLACE_ITEM_MULTIPLE_PURCHASE_ERROR = 0x1F4A,
	BD_MARKETPLACE_MISSING_REQUIRED_ENTITLEMENT = 0x1F4B,
	BD_MARKETPLACE_VALIDATION_ERROR = 0x1F4C,
	BD_MARKETPLACE_TENCENT_PAYMENT_ERROR = 0x1F4D,
	BD_MARKETPLACE_SKU_NOT_COUPON_ENABLED_ERROR = 0x1F4E,
	BD_MARKETPLACE_TRANSACTION_ERROR = 0x1F4F,
	BD_MARKETPLACE_RECEIPT_USED = 0x1F50,
	BD_MARKETPLACE_INVALID_RECEIPT = 0x1F51,
	BD_MARKETPLACE_STEAM_REQUEST_FAILED = 0x1F52,
	BD_MARKETPLACE_STEAM_NOT_APPROVED = 0x1F53,
	BD_MARKETPLACE_PRODUCT_NOT_FOUND_IN_FP = 0x1F54,
	BD_MARKETPLACE_STEAM_ALREADY_FINALIZED = 0x1F54,
	BD_MARKETPLACE_STEAM_BAD_ORDER_ID = 0x1F55,
	BD_MARKETPLACE_STEAM_CURRENCY_ERROR = 0x1F56,
	BD_MARKETPLACE_PSN_INVALID_NP_TITLE_ID = 0x1F65,
	BD_MARKETPLACE_PSN_INVALID_NP_AUTH_CODE = 0x1F57,
	BD_MARKETPLACE_PSN_INVALID_ENTITLEMENT_ID = 0x1F58,
	BD_MARKETPLACE_PSN_ENTITLEMENT_NOT_PRESENT = 0x1F59,
	BD_MARKETPLACE_PSN_INTERNAL_ERROR = 0x1F5A,
	BD_MARKETPLACE_XB1_UNAUTHORISED_ERROR = 0x1F5B,
	BD_MARKETPLACE_XB1_REQUEST_REJECTED_ERROR = 0x1F5C,
	BD_MARKETPLACE_XB1_INSUFFICIENT_QUANTITY_ERROR = 0x1F5D,
	BD_MARKETPLACE_XB1_BAD_DELEGATION_TOKEN_ERROR = 0x1F5E,
	BD_MARKETPLACE_XB1_REQUEST_FAILED_ERROR = 0x1F5F,
	BD_MARKETPLACE_X360_REQUEST_FAILED = 0x1F60,
	BD_MARKETPLACE_X360_ITEM_NOT_PRESENT = 0x1F61,
	BD_MARKETPLACE_X360_CONNECTION_ERROR = 0x1F62,
	BD_MARKETPLACE_USAGE_TIME_ERROR = 0x1F63,
	BD_MARKETPLACE_DURABLE_ALREADY_GRANTED = 0x1F64,
	BD_MARKETPLACE_FIRST_PARTY_DURABLE_EXISTS = 0x1F66,
	BD_MARKETPLACE_ITEM_LIMIT_REACHED = 0x1F67,
	BD_MARKETPLACE_OVER_ITEM_MAX_QUANTITY_ERROR = 0x1F69,
	BD_MARKETPLACE_INSUFFICIENT_ITEM_QUANTITY = 0x1F6A,
	BD_MARKETPLACE_ENTITY_NOT_ENABLED = 0x1F6B,
	BD_MARKETPLACE_MISCONFIGURED = 0x1F6C,
	BD_MARKETPLACE_COUPON_NOT_CLAIMED_OR_FOUND = 0x1F6D,
	BD_MARKETPLACE_INVALID_DISCOUNT = 0x1F6E,
	BD_MARKETPLACE_SKU_SOLD_OUT = 0x1F72,
	BD_MARKETPLACE_WIIU_AUTH_FAILED = 0x1F73,
	BD_MARKETPLACE_WIIU_INVALID_PARAMETER = 0x1F74,
	BD_MARKETPLACE_WIIU_TAX_LOCATION_NOT_SPECIFIED = 0x1F75,
	BD_MARKETPLACE_WIIU_ACCOUNT_ERROR = 0x1F76,
	BD_MARKETPLACE_WIIU_PURCHASING_ERROR = 0x1F77,
	BD_MARKETPLACE_WIIU_BALANCE_ERROR = 0x1F78,
	BD_MARKETPLACE_WIIU_SERVER_ERROR = 0x1F79,
	BD_MARKETPLACE_WIIU_REQUEST_FAILED = 0x1F7A,
	BD_MARKETPLACE_WIIU_SERVER_MAINTENANCE = 0x1F7B,
	BD_MARKETPLACE_WIIU_SERVICE_TERMINATED = 0x1F7C,
	BD_MARKETPLACE_WIIU_ITEM_NOT_PRESENT = 0x1F7D,
	BD_MARKETPLACE_WIIU_TAX_LOCATION_INVALID = 0x1F7E,
	BD_MARKETPLACE_XB1_DURABLE_NOT_PRESENT = 0x1F7F,
	BD_COMMS_SERVICE_NOT_AVAILABLE_ERROR = 0x28A0,
	BD_COMMS_CLIENT_ERROR = 0x28A1,
	BD_LEAGUE_INVALID_TEAM_SIZE = 0x1FA4,
	BD_LEAGUE_INVALID_TEAM = 0x1FA5,
	BD_LEAGUE_INVALID_SUBDIVISION = 0x1FA6,
	BD_LEAGUE_INVALID_LEAGUE = 0x1FA7,
	BD_LEAGUE_TOO_MANY_RESULTS_REQUESTED = 0x1FA8,
	BD_LEAGUE_METADATA_TOO_LARGE = 0x1FA9,
	BD_LEAGUE_TEAM_ICON_TOO_LARGE = 0x1FAA,
	BD_LEAGUE_TEAM_NAME_TOO_LONG = 0x1FAB,
	BD_LEAGUE_ARRAY_SIZE_MISMATCH = 0x1FAC,
	BD_LEAGUE_SUBDIVISION_MISMATCH = 0x2008,
	BD_LEAGUE_INVALID_WRITE_TYPE = 0x2009,
	BD_LEAGUE_INVALID_STATS_DATA = 0x200A,
	BD_LEAGUE_SUBDIVISION_UNRANKED = 0x200B,
	BD_LEAGUE_CROSS_TEAM_STATS_WRITE_PREVENTED = 0x200C,
	BD_LEAGUE_INVALID_STATS_SEASON = 0x200D,
	BD_COMMERCE_ERROR = 0x206C,
	BD_COMMERCE_RESOURCE_NOT_FOUND = 0x206D,
	BD_COMMERCE_STORAGE_INVALID_PARAMETER = 0x206E,
	BD_COMMERCE_APPLICATION_INVALID_PARAMETER = 0x206F,
	BD_COMMERCE_RESOURCE_CONFLICT = 0x2070,
	BD_COMMERCE_STORAGE_ERROR = 0x2071,
	BD_COMMERCE_INTEGRITY_ERROR = 0x2072,
	BD_COMMERCE_MMP_SERVICE_ERROR = 0x2073,
	BD_COMMERCE_PERMISSION_DENIED = 0x2074,
	BD_COMMERCE_INSUFFICIENT_FUNDS_ERROR = 0x2075,
	BD_COMMERCE_UNKNOWN_CURRENCY = 0x2076,
	BD_COMMERCE_INVALID_RECEIPT = 0x2077,
	BD_COMMERCE_RECEIPT_USED = 0x2078,
	BD_COMMERCE_TRANSACTION_ALREADY_APPLIED = 0x2079,
	BD_COMMERCE_INVALID_CURRENCY_TYPE = 0x207A,
	BD_COMMERCE_UNKNOWN_PLATFORM = 0x207B,
	BD_COMMERCE_WINDOWS_STORE_CERT_INVALID = 0x207C,
	BD_CONNECTION_COUNTER_ERROR = 0x20D0,
	BD_LINKED_ACCOUNTS_INVALID_CONTEXT = 0x2198,
	BD_LINKED_ACCOUNTS_INVALID_PLATFORM = 0x2199,
	BD_LINKED_ACCOUNTS_LINKED_ACCOUNTS_FETCH_ERROR = 0x219A,
	BD_LINKED_ACCOUNTS_INVALID_ACCOUNT = 0x219B,
	BD_LINKED_ACCOUNTS_INVALID_TOKEN = 0x219C,
	BD_QUEUED_MATCHING_ERROR = 0x2260,
	BD_QUEUED_MATCHING_NOT_FOUND = 0x2261,
	BD_QUEUED_MATCHING_WRONG_QUEUE_TYPE = 0x2262,
	BD_QUEUED_MATCHING_INVALID_QUEUE_ID = 0x2263,
	BD_LOGIN_QUEUE_NO_ERROR = 0x22C4,
	BD_LOGIN_QUEUE_ENVIRONMENT_ERROR = 0x22C5,
	BD_LOGIN_QUEUE_UNKNOWN_ERROR = 0x22C6,
	BD_LOGIN_QUEUE_BAD_REQUEST = 0x22C7,
	BD_LOGIN_QUEUE_SERVER_UNAVAILABLE_ERROR = 0x22C8,
	BD_LOGIN_QUEUE_SSL_CERTIFICATE_ERROR = 0x22C9,
	BD_LOGIN_QUEUE_DNS_RESOLUTION_ERROR = 0x22CA,
	BD_LOGIN_QUEUE_JSON_FORMAT_ERROR = 0x22CB,
	BD_LOGIN_QUEUE_TICKET_PARSE_ERROR = 0x22CC,
	BD_LOGIN_QUEUE_INVALID_TITLE_ID = 0x22CD,
	BD_VOTING_MAX_VALUE_EXCEEDED = 0x2328,
	BD_VOTING_INVALID_GROUP_NAME = 0x2329,
	BD_VOTING_IN_PROGRESS = 0x232A,
	BD_VOTING_NON_EXISTENT_GROUP = 0x232B,
	BD_USER_GENERATED_STATS_ERROR = 0x238C,
	BD_INVALID_ACCESS_TO_USER_GENERATED_LB_ERROR = 0x238D,
	BD_INVALID_ACCESS_TO_NON_USER_GENERATED_LB_ERROR = 0x238E,
	BD_SUB_LEADERBOARD_ID_MISMATCH_ERROR = 0x238D,
	BD_PUBLISHER_VARIABLES_SERVICE_ERROR = 0x251C,
	BD_PUBLISHER_VARIABLES_NOT_FOUND = 0x251D,
	BD_GMSG_INVALID_CATEGORY_ID = 0x27D8,
	BD_GMSG_CATEGORY_MEMBERSHIPS_LIMIT = 0x27D9,
	BD_GMSG_NONMEMBER_POST_DISALLOWED = 0x27DA,
	BD_GMSG_CATEGORY_DISALLOWS_CLIENT_TYPE = 0x27DB,
	BD_GMSG_PAYLOAD_TOO_BIG = 0x27DC,
	BD_GMSG_MEMBER_POST_DISALLOWED = 0x27DD,
	BD_GMSG_OVERLOADED = 0x27DE,
	BD_GMSG_USER_PERCATEGORY_POST_RATE_EXCEEDED = 0x27DF,
	BD_GMSG_USER_GLOBAL_POST_RATE_EXCEEDED = 0x27E0,
	BD_GMSG_GROUP_POST_RATE_EXCEEDED = 0x27E1,
	BD_CODO_CLAN_NO_TEMP_RESERVATION = 0x2AF8,
	BD_CODO_CLAN_TOO_MANY_MEMBERSHIPS = 0x2AF9,
	BD_CODO_CLAN_UNEXPECTED_FOUNDATION_STATE = 0x2AFA,
	BD_CODO_CLAN_UNABLE_TO_FIND_NAME = 0x2AFB,
	BD_CODO_CLAN_INTERNAL_MARKETPLACE_ERROR = 0x2AFC,
	BD_CODO_CLAN_INSUFFICIENT_FUNDS = 0x2AFD,
	BD_CODO_CLAN_UNSATISFIED_PRECONDITION = 0x2AFE,
	BD_CODO_CLAN_NO_CLAN = 0x2AFF,
	BD_CODO_CLAN_NO_CHANNEL = 0x2B00,
	BD_CODO_CLAN_NOT_A_CLAN_MEMBER = 0x2B01,
	BD_CODO_CLAN_DISBAND_TOO_MANY_MEMBERS = 0x2B04,
	BD_CODO_CLAN_DISBAND_TOO_SOON = 0x2B05,
	BD_NO_SUCH_ROLE = 0x2EE0,
	BD_NO_SUCH_PERMISSION = 0x2EE1,
	BD_BAD_ROLE_SPECIFICATION = 0x2EE2,
	BD_BAD_PERMISSION_SPECIFICATION = 0x2EE3,
	BD_REWARD_NO_REWARD_TOKEN_FOUND = 0x364C,
	BD_REWARD_INVALID_ACHIEVEMENT_IDS_SPECIFIED = 0x364D,
	BD_REWARD_CLIENT_ACHIEVEMENTS_NOT_ENABLED = 0x364E,
	BD_REWARD_EVENTS_ERROR = 0x364F,
	BD_REWARD_EVENTS_NOT_ENABLED = 0x3650,
	BD_REWARD_EVENTS_RULES_ERROR = 0x3651,
	BD_REWARD_EVENTS_DATA_ERROR = 0x3652,
	BD_REWARD_EVENTS_TRANSACTION_ERROR = 0x3653,
	BD_UMBRELLA_PROVIDER_SERVER_ERROR = 0x36B0,
	BD_UMBRELLA_PROVIDER_UNSUPPORTED_OPERATION = 0x36B1,
	BD_UMBRELLA_ERROR = 0x36B2,
	BD_UMBRELLA_INVALID_TITLE_ID = 0x36B3,
	BD_UMBRELLA_INVALID_QUERY_STRING = 0x36B4,
	BD_UMBRELLA_INVALID_DATA = 0x36B5,
	BD_UMBRELLA_INVALID_CLIENT = 0x36B6,
	BD_UMBRELLA_PROVIDER_NOT_SUPPORTED = 0x36B7,
	BD_UMBRELLA_UNAUTHORIZED_ACCESS = 0x36B8,
	BD_UMBRELLA_INVALID_TOKEN = 0x36B8,
	BD_UMBRELLA_EXPIRED_PROVIDER_REFRESH_TOKEN = 0x36B9,
	BD_UMBRELLA_NO_VALID_PROVIDER_TOKENS = 0x36BA,
	BD_UMBRELLA_INVALID_LSG_TICKET = 0x36BB,
	BD_UMBRELLA_TOKEN_NOT_FOUND = 0x36BC,
	BD_UMBRELLA_USER_NOT_FOUND = 0x36BD,
	BD_UMBRELLA_ACCOUNT_NOT_FOUND = 0x36BE,
	BD_UMBRELLA_MERGE_CONFLICT = 0x36BF,
	BD_UMBRELLA_PROVIDER_INACCESSIBLE = 0x36C0,
	BD_UMBRELLA_MISSING_FIELD = 0x36C1,
	BD_UNO_ERROR = 0x3714,
	BD_UNO_INVALID_DATA = 0x3715,
	BD_UNO_INVALID_DATE_OF_BIRTH = 0x3716,
	BD_UNO_UNAUTHORIZED_ACCESS = 0x3717,
	BD_UNO_INVALID_TOKEN = 0x3718,
	BD_UNO_EXPIRED_TOKEN = 0x3719,
	BD_UNO_EMAIL_NOT_VERIFIED = 0x371A,
	BD_UNO_TOS_VERSION_NOT_FOUND = 0x371B,
	BD_UNO_TOS_CONTENT_NOT_FOUND = 0x371C,
	BD_UNO_TOS_ALREADY_ACCEPTED = 0x371D,
	BD_UNO_MISSING_FIELD = 0x371E,
	BD_UNO_DNS_RESOLUTION_FAILED = 0x371F,
	BD_SI_ERROR = 0x3777,
	BD_MAX_ERROR_CODE = 0x3778,
};

typedef struct
{
	DWORD R;
	DWORD G;
	DWORD B;
	DWORD A;
}RGBA;

struct DDLState
{
public:
	bool isValid;
	std::int32_t offset;
	std::int32_t arrayIndex;
	void* member;
	const void* ddlDef;
};

struct DDLContext
{
public:
	void* buff;
	std::int32_t len;
	const void* def;
	void(*writeCB)(DDLContext*, void*);
	void* userData;
};

typedef std::int32_t StorageSlot;

typedef struct _SceKernelEventFlag* SceKernelEventFlag;

typedef int LobbyLeaderActivity;

typedef eAttachment eAttachment_0;

typedef netsrc_t netsrc_t_0;

typedef int32_t int32_t_0;

typedef uint64_t LobbyID_0;

typedef uint64_t uint64_t_0;

typedef uint32_t uint32_t_0;

typedef uint8_t uint8_t_0;

typedef unsigned __int64 __uint64_t;

typedef unsigned __int32 __uint32_t;

typedef __int32 __int32_t;

typedef float __float32_t;

typedef __uint64_t bdUInt64;

typedef __int32_t bdInt32;

typedef unsigned __int8 bdUByte8;

typedef unsigned int bdUInt;

typedef __float32_t bdFloat32;

typedef __uint32_t bdUInt32;

typedef uint64_t XUID;

typedef unsigned char gametypesettings_t[23552];

struct v3
{
	float x, y, z;
};

struct netadr_t
{
	union
	{
		std::uint8_t ip[4];
		std::uint32_t inaddr;
	};

	std::uint16_t port;
	netadrtype_t type;
	netsrc_t localNetID;
};

namespace infoprobe
{
	struct infoprobe_t
	{
		bool searching;
		std::uint64_t searchxuid;
		netadr_t searchadr;
	};
}

struct LANClientInfo
{
	XUID xuid;
	char gamertag[32];
};

struct Msg_LobbyClientDisconnect
{
	LobbyType lobbyType;
	XUID xuid;
};

struct EVENT_HANDLE
{
	bool manualReset;
	SceKernelEventFlag ef;
};

struct netchanMsgConfig_t
{
	EVENT_HANDLE completedEvent;
	netchanMessageState_e status;
	int timeoutMS;
};

struct SessionInfo
{
	bool inSession;
	netadr_t netAdr;
	time_t lastMessageSentToPeer;
};

struct FixedClientInfo
{
	std::uint64_t xuid;
	char gamertag[32];
};

struct ActiveClient
{
	char pad[0x410];
	FixedClientInfo fixedClientInfo;
	SessionInfo sessionInfo[2];
};

struct SessionClient
{
	char pad[0x8];
	ActiveClient* activeClient;
};

struct Msg_VoicePacket
{
	LobbyType lobbyType;
	std::uint8_t talkerIndex;
	std::int32_t relayBits;
	std::uint16_t sizeofVoiceData;
	std::uint8_t numPacketsInData;
	std::uint8_t voiceData[1198];
};

struct Msg_LobbyIngameMigrateNewHost
{
	LobbyType lobbyType;
	std::uint64_t hostXuid;
};


struct Msg_MigrateTest
{
	LobbyType lobbytype;
	std::uint64_t xuid;
	bool isack;
	int timems;
	unsigned char seqorcount;
};

struct Msg_MigrateStart
{
	LobbyType lobbyType;
	std::uint64_t hostXuid;
};



struct Msg_LobbyHostDisconnect
{
	LobbyType lobbyType;
	std::uint64_t xuid;
};

struct Msg_LobbyHostLeaveWithparty
{
	LobbyType lobbyType;
};

struct Msg_ClientHeartBeat
{
	LobbyType lobbyType;
	unsigned __int16 totallatencyms;
	unsigned __int32 recievedpackets;
	float totalstddev;
	unsigned __int32 uploadbandwidth;
};


struct Msg_ClientContent
{
	unsigned int datamask;
	int lobbytype;
	uint64_t clientxuid;
	unsigned short buffersize;
	char buffer;
	unsigned unsigned __int16 buffer2;
	uint8_t sessionmode;
	uint8_t gamemode;
};





struct Msg_JoinComplet
{
	bool xuid;
};

struct Msg_P2PTest
{
	LobbyType lobbytype;
	int index;
};

struct Msg_P2PInfo
{
	LobbyType lobbytype;
	int connectbit;
	uint64_t xuid;
};

struct Msg_ClientDisconnect
{
	LobbyType lobbytype;
	uint64_t xuid;
};




struct Msg_JoinRequestAgrement
{
	std::uint64_t xuid;
};

struct Msg_DemoState
{
	LobbyType lobbyType;
	bool paused;
	int servertime;
	int timescale;
	int client;
	int kframeindex;
	int lstjumpedkframe;
	int kframejumpcount;
	int lstkframetime;
};

struct LobbySession
{
	LobbyModule module;
	LobbyType type;
	LobbyMode mode;
	char pad[0x34];
	SessionActive active;
	char pad2[0x121D4];
};

struct Msg_InfoRequest
{
	std::uint32_t nonce;
};

struct bdSecurityID
{
	std::uint64_t id;
};

struct bdSecurityKey
{
	char ab[16];
};

#pragma pack(push, 1)
struct XNADDR
{
	char pad[0x1E];
	union
	{
		std::uint8_t ip[4];
		std::uint32_t inaddr;
	};

	std::uint16_t port;
	char pad2[0x1];
};
#pragma pack(pop)

struct XSESSION_INFO
{
	bdSecurityID sessionID;
	XNADDR hostAddress;
	bdSecurityKey keyExchangeKey;
};

struct msg_t
{
	bool overflowed;
	bool readOnly;
	char* data;
	char* splitData;
	int maxsize;
	int cursize;
	int splitSize;
	int readcount;
	int bit;
	int lastEntityRef;
	bool flush;
	netsrc_t targetLocalNetID;
};

struct JoinSessionMessage
{
	IMType mType;
	char pad[0x60];
};

struct LobbyMsg
{
	msg_t msg;
	MsgType msgType;
	PackageType packageType;
	char encodeFlags;
};


struct LobbyParams
{
	LobbyNetworkMode networkMode;
	LobbyMainMode mainMode;
};

struct SerializedAdr
{
	bool valid;
	XNADDR xnaddr;
};

struct InfoResponseLobby
{
	bool isValid;
	std::uint64_t hostXuid;
	char hostName[32];
	bdSecurityID secId;
	bdSecurityKey secKey;
	SerializedAdr serializedAdr;
	LobbyParams lobbyParams;
	char ugcName[0x20]; // 0x78
	__int32 ugcVersion; // 0x98
	char pad4[0x4]; // 0x9C
};

struct Msg_InfoResponse
{
	std::uint32_t nonce;
	int uiScreen;
	char natType;
	InfoResponseLobby lobby[2];
};


struct Msg_InfoResponseLobbyServer
{
	clientplatform_t clientPlatform;
	InfoResponseLobby lobby[2];
	XUID xuid;
	char gamertag[32];
	eModes sessionMode;
	char mapName[32];
	char gameType[32];
	bool isInGame;
	uint32_t clientCount;
	LANClientInfo client[18];
};



struct SessionSearchThrottleData
{
	int returnTimeMs;
};

struct SessionSearchPayloadData
{
	bool (*abortCheckfunc)(void);
	SessionSearchThrottleData* throttleData;
};

struct ActiveList
{
	LobbyModule module;
	char name;
	XUID client;
};





struct usercmd_s
{
	int serverTime;                 //0x0 
	int buttons;                    //0x4
	char pad0[0x8];                 //0x8
	int angles[3];                  //0x10
	char pad1[0x1C];                //0x1C
	char forwardmove;                //0x38
	char rightmove;                    //0x39
	char pad2[0xA];                    //0x3A
	__int16 damageKick[2];            //0x44
	char pad3[0x8];                    //0x48
}; //size 0x50

struct clientActive_t
{
	char pad0[0x180];                //0x0
	ImVec3 delta_angles;                //0x180
	char pad1[0xB64C];                //0x18C
	ImVec3 cgameKickAngles;            //0xB7D8
	char pad2[0xE4];                //0xB7E4
	ImVec3 viewAngles;                //0xB8C8
	char pad3[0x10001C];            //0xB8D4
	usercmd_s cmds[128];            //0x10B8F0
	int cmdNumber;                    //
	usercmd_s* GetCmd(int Index)
	{
		return &cmds[(Index & 0x7F)];
	}
	//not complete
};

struct PresencePlatformData
{
	PresencePrimary primaryPresence;
	char titleId[32];
	char titleName[64];
	char titleStatus[64];
};

struct PresenceTitleData_Party_Member
{
	char gamertag[17];
};

struct PresenceTitleData_Party
{
	int max;
	int totalCount;
	int availableCount;
	PresenceTitleData_Party_Member members[18];
};

struct server_t {

	std::uint64_t xuid;
	std::string ip;
	std::string port;
	//netadr_t netadr;
	unsigned int numPlayers;
	unsigned int maxPlayers;
	unsigned int serverType;
	unsigned int gameType;

	int geo1;
	int geo2;
	int geo3;
	int geo4;
};

struct MatchMakingInfo
{
	bdUInt64 m_GAME_SECURITY_ID;
	bdUByte8 m_GAME_SECURITY_KEY[17];
	bdInt32 m_SERVER_TYPE;
	bdUInt64 m_PLAYERUID;
	bdUInt32 m_SERVER_LOCATION;
	bdUInt32 m_LATENCY_BAND;
	bdInt32 m_SHOW_IN_MATCHMAKING;
	bdInt32 m_NETCODE_VERSION;
	bdInt32 m_MAP_PACKS;
	bdInt32 m_PLAYLIST_VERSION;
	bdInt32 m_PLAYLIST_NUMBER;
	bdInt32 m_IS_EMPTY;
	bdInt32 m_TEAM_SIZE_MAX;
	bdFloat32 m_SKILL;
	bdInt32 m_GEO_1;
	bdInt32 m_GEO_2;
	bdInt32 m_GEO_3;
	bdInt32 m_GEO_4;
	bdInt32 m_dirty;
	bdInt32 m_active;
	bdInt32 m_timeSinceLastUpdate;
	bdInt32 m_recreateSession;
	bdUInt m_timeSinceUpdate;
	_BYTE gap19C[20];
};

struct JoinPartyMember
{
	XUID xuid;
	uint64_t lobbyID;
	float skillRating;
	float skillVariance;
	uint32_t probationTimeRemaining[2];
};

struct PresenceTitleData
{
	PresenceActivity activity;
	PresenceCtx ctx;
	LobbyJoinable joinable;
	int gametypeID;
	int mapID;
	int difficulty;
	int playlist;
	int startupTimestamp;
	PresenceTitleData_Party party;
};

struct PresenceData
{
	int version;
	int flags;
	const std::uint64_t xuid;
	bool isDirty;
	bool isInitialzied;
	int id;
	const char* base;
	const char* params;
	const char* data;
	int failureCount;
	int lastUpdateTime;
	int state;
	PresenceTitleData title;
	PresencePlatformData platform;
};

struct ClientProgression
{
	uint8_t rank;
	uint8_t prestige;
};

struct BubbleGumBuffsLobbyClientInfo
{
	unsigned char bubbleGumBuffs[5];
};

struct CharacterCustomizationLobbyClientInfo
{
	unsigned char selectedCharacterType;
	unsigned char selectedCharacterMode;
	unsigned char selectedHeadType;
	unsigned char selectedLoadoutSlot;
	unsigned char selectedCharacterItem[2];
	unsigned char selectedCharacterItemColors[2][3];
};

struct CollectibleInfo
{
	bool isSet;
	char mapName[32];
	unsigned char collectibleIndex;
};


struct MutableClientInfo
{
	char clantag[5];
	ClientProgression progression[3];
	BubbleGumBuffsLobbyClientInfo bubbleGumInfo;
	int arenaPoints;
	CharacterCustomizationLobbyClientInfo heroInfo;
	CollectibleInfo collectibles[9];
	uint32_t flags;
	float skillRating;
	float skillVariance;
};

struct MsgMutableClientInfo
{
	MutableClientInfo mutableClientInfo;
};

struct MsgHostMigrateInfo
{
	uint8_t_0 indexBits;
	int32_t_0 lasthostTimeMS;
	XUID migrateNominees[18];
};

struct MsgClientLobbyInfo
{
	XUID xuid;
	uint8_t_0 clientNum;
	char gamertag[32];
	LobbyID_0 lobbyID;
	int32_t_0 qport;
	unsigned char latencyBand;
	MsgMutableClientInfo mutableClientInfoMsg;
	int32_t_0 score;
	int32_t_0 connectivityBits;
	SerializedAdr serializedAddr;
	netsrc_t_0 localNetID;
	uint32_t_0 joinOrder;
};

struct Msg_LobbyState
{
	int stateNum;
	LobbyType lobbyType;
	LobbyMode lobbyMode;
	LobbyNetworkMode lobbyNetworkMode;
	LobbyMainMode lobbyMainMode;
	PartyPrivacy partyPrivacy;
	SessionStatus status;
	int uiScreen;
	LobbyLeaderActivity uiLeaderActivity;
	char key[32];
	XUID clientLeader;
	int maxClients;
	bool isAdvertised;
	int clientCount;
	MsgClientLobbyInfo clientList[18];
	MsgHostMigrateInfo migrateInfo;
};

struct CharacterSelection
{
	uint32_t characterIndex;
	heroLoadoutTypes_e loadoutType;
};

struct ItemVote
{
	uint32_t globalVoteIndex;
	VoteItemType itemType;
	uint32_t itemIndex;
	itemGroup_t itemGroup;
	eAttachment_0 attachment;
	VoteType voteType;
};

struct GameClientData
{
	team_t team;
	LobbyMapVote mapVote;
	LobbyClientPregameState pregameState;
	int32_t pregamePosition;
	ItemVote itemVotes[12];
	uint32_t itemVoteCount;
	CharacterSelection characterSelection;
};


struct GameData
{
	GameServerStatus serverStatus;
	int launchNonce;
	eGameModes gameMode;
	char gameType[32];
	char mapName[32];
	int status;
	int statusValue;
	LobbyPregameState pregameState;
	int playlistId;
	int playlistCurrentEntry;
	unsigned char playlistLastEntries[8];
	GameClientData client[18];
	char cpQueuedLevel[32];
	char demoName[32];
	uint64_t_0 fileId;
	int fileSize;
	bool isUserFile;
	bool isLiveStream;
	XUID authorXUID;
	eModes mainMode;
	char demoMode[32];
	bool dirty;
};

struct Msg_LobbyStateGame
{
	Msg_LobbyState core;
	GameData data;
	int compressedBufferSize;
	gametypesettings_t compressedBuffer;
};

struct Msg_JoinAgreementRequest
{
	XUID hostXuid;
	char hostName[32];
	bdSecurityID secId;
	bdSecurityKey secKey;
	SerializedAdr serializedAdr;
	int sourceLobbyType;
	int destinationLobbyType;
	LobbyParams destinationLobbyParams;
	uint64_t reservationKey;
	int agreementNonce;
	int serverLoc;
};

struct Msg_JoinResponse
{
	JoinResult response;
	char name[32];
	LobbyType lobbyType;
	LobbyParams lobbyParams;
	uint64_t reservationKey;
};

struct vec2_t
{
	float x, y;
};

struct bones
{
	ImVec2 origin, head, j_helmetpos_screen, j_headpos_screen, j_eyeball_lepos_screen, j_eyeball_ripos_screen, j_teeth_upperpos_screen, j_neckpos_screen, j_clavicle_lepos_screen, j_clavicle_ripos_screen, j_shoulder_lepos_screen, j_shoulder_ripos_screen, j_spineupperpos_screen, j_spinelowerpos_screen,
		j_elbow_lepos_screen, j_elbow_ripos_screen, j_wrist_lepos_screen, j_wrist_ripos_screen, j_palm_lepos_screen, j_palm_ripos_screen, j_hip_lepos_screen, j_hip_ripos_screen, j_knee_lepos_screen, j_knee_ripos_screen, j_ankle_lepos_screen, j_ankle_ripos_screen,
		j_ball_lepos_screen, j_ball_ripos_screen, tag_foot_fx_left_frontpos_screen, tag_foot_fx_right_frontpos_screen, j_mainrootpos_screen;

	ImVec3 j_helmetpos, j_headpos, j_eyeball_lepos, j_eyeball_ripos, j_teeth_upperpos, j_neckpos, j_clavicle_lepos, j_clavicle_ripos, j_shoulder_lepos, j_shoulder_ripos, j_spineupperpos, j_spinelowerpos, j_elbow_lepos, j_elbow_ripos, j_wrist_lepos, j_wrist_ripos,
		j_palm_lepos, j_palm_ripos, j_hip_lepos, j_hip_ripos, j_knee_lepos, j_knee_ripos, j_ankle_ripos, j_ankle_lepos, j_ball_lepos, j_ball_ripos,
		tag_foot_fx_left_frontpos, tag_foot_fx_right_frontpos, j_mainrootpos;
};

struct player_t
{
	uintptr_t address;

	short type;
	const char* dobj_name;

	XUID pxuid;
	const char* pname;

	bool team = false;
	bool visible;

	struct is_team
	{
		bool friendly;
	};

	int health;
	float distance[2047];;
	char player_name[255];
	char weapon_name[255];
	bool targeted;
	bool is_valid = false;
	bool ignore = { false };
	bool prioritize = { false };
	bool prioritytoggle;
};



struct compass_s
{
	float compass_size, arrow_size;
	ImVec2 compass_pos, arrow_pos[2047];

};

struct LobbyList
{
	std::string name;
	uint64_t xuid;
	int team;
	int position;
	netadr_t netadr;
	std::string ipString;
	const char* score;
	const char* Kills;
	const char* Deaths;
	const char* KD;
	const char* Assists;
};

struct geolocate_s
{
	char* country_short;
	char* country_long;
	char* region;
	char* city;
	char* isp;
	char* domain;
	char* zipcode;
	char* timezone;
	char* netspeed;
	char* iddcode;
	char* areacode;
	char* weatherstationcode;
	char* weatherstationname;
	char* mcc;
	char* mnc;
	char* mobilebrand;
	char* usagetype;

	float latitude;
	float longitude;
	float elevation;

	char* zip_code;
	char* time_zone;
	char* net_speed;
	char* idd_code;
	char* area_code;
	char* weather_station_code;
	char* weather_station_name;
	char* mobile_brand;
	char* usage_type;
	char* address_type;
	char* category;

};

